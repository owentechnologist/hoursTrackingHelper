openapi: 3.0.0
info:
  title: time tracker V.01
  version: '1.0'
  contact:
    name: Owen Taylor
    url: 'http://notreal.real.com'
    email: notreal@real.com
  description: This API allows the user to enter and track hours spent each day on distinct tasks
servers:
  - url: api.example.com
paths:
  /users:
    get:
      summary: List all users
      operationId: listUsers
      tags:
        - users
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of users
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/users"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a User
      operationId: createUser
      tags:
        - users
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userid}:
    get:
      summary: Info for a specific User
      operationId: showUserById
      tags:
        - users
      parameters:
        - name: userid
          in: path
          required: true
          description: The id of the User to retrieve
          schema:
            type: integer 
            format: int32
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /tasks:
    get:
      summary: List all tasks
      operationId: listTasks
      tags:
        - tasks
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of tasks
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/tasks"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a Task
      operationId: createTask
      tags:
        - tasks
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /tasks/{taskid}:
    get:
      summary: Info for a specific task
      operationId: showTaskById
      tags:
        - tasks
      parameters:
        - name: taskid
          in: path
          required: true
          description: The id of the Task to retrieve
          schema:
            type: integer 
            format: int32
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/task"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /time-entries:
    get:
      summary: List all time-entries
      operationId: listTimeEntries
      tags:
        - time-entries
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of time-entries
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/time-entries"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a time-entry
      operationId: createTimeEntry
      tags:
        - time-entries
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /time-entries/{time-entry-id}:
    get:
      summary: Info for a specific time-entry
      operationId: showTimeEntryById
      tags:
        - time-entries
      parameters:
        - name: time-entry-id
          in: path
          required: true
          description: The id of the time-entry to retrieve
          schema:
            type: integer 
            format: int32
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/time-entry"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /task-assignments:
    get:
      summary: List all task-assignments
      operationId: listTaskAssignments
      tags:
        - task-assignments
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of time-entries
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/task-assignments"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a task-assignments
      operationId: createTaskAssignment
      tags:
        - task-assignments
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /task-assignments/{task-assignment-id}:
    get:
      summary: Info for a specific task-assignment
      operationId: showTaskAssignmentById
      tags:
        - task-assignments
      parameters:
        - name: task-assignment-id
          in: path
          required: true
          description: The id of the task-assignment to retrieve
          schema:
            type: integer 
            format: int32
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/task-assignment"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /sum-minutes-responses:
    get:
      summary: List all summaries of minutes spent on tasks for all users
      operationId: listSumMinutesSpentOnTasks
      tags:
        - sum-minutes-responses
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of sum-minutes-responses
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/sum-minutes-responses"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /sum-minutes-responses/{taskid}:
    get:
      summary: Summary Info of time spent by all assigned users for a specific task
      operationId: showMinutesSpentSummedByUsersForTask
      tags:
        - sum-minutes-responses
      parameters:
        - name: taskid
          in: path
          required: true
          description: The id of the task-assignment to retrieve
          schema:
            type: integer 
            format: int32
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/sum-minutes-response"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    task:
      type: object
      required:
        - task-name
        - task-extra-info
      properties:
        id:
          type: integer
          format: int32
        task-name:
          type: string
        task-extra-info:
          type: string
    tasks:
      type: array
      items:
        $ref: "#/components/schemas/task"
    user:
      type: object
      required:
        - user-fname
        - user-lname
        - job-title
      properties:
        id:
          type: integer
          format: int32
        user-fname:
          type: string
        user-lname:
          type: string
        job-title:
          type: string
    users:
      type: array
      items:
        $ref: "#/components/schemas/user"
    task-assignment:
      type: object
      required:
        - user-id
        - task-id
      properties:
        id:
          type: integer
          format: int32
        user-id:
          type: integer
          format: int32
        task-id:
          type: integer
          format: int32
    task-assignments:
      type: array
      items:
        $ref: "#/components/schemas/task-assignment"
    time-entry:
      type: object
      required:
        - task-assignment-id
        - minutes-spent
      properties:
        id:
          type: integer
          format: int32
        task-assignment-id:
          type: integer
          format: int32
        minutes-spent:
          type: integer
          format: int32
    time-entries:
      type: array
      items:
        $ref: "#/components/schemas/time-entry"
    sum-minutes-response:
      type: object
      required:
        - task-name
        - user-name
        - job-title
        - minutes-spent
      properties:
        task-name:
          type: string
        user-name:
          type: string
        job-title:
          type: string
        minutes-spent:
          type: integer
          format: int32
    sum-minutes-responses:
      type: array
      items:
        $ref: "#/components/schemas/sum-minutes-response"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
